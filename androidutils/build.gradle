apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

group = "com.uwetrottmann.androidutils"
archivesBaseName = "androidutils"
version = "2.3.1"

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 2
        versionName project.version
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.android.support:support-core-utils:26.0.0'
}

nexusStaging {
    packageGroup = "com.uwetrottmann"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    if (rootProject.hasProperty('SONATYPE_NEXUS_USERNAME') && rootProject.hasProperty('SONATYPE_NEXUS_PASSWORD')) {
                        authentication(userName: SONATYPE_NEXUS_USERNAME, password: SONATYPE_NEXUS_PASSWORD)
                        println "NOTE: Release artifacts will be signed."
                    } else {
                        println "WARNING: Release artifacts will not be signed."
                    }
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    if (rootProject.hasProperty('SONATYPE_NEXUS_USERNAME') && rootProject.hasProperty('SONATYPE_NEXUS_PASSWORD')) {
                        authentication(userName: SONATYPE_NEXUS_USERNAME, password: SONATYPE_NEXUS_PASSWORD)
                        println "NOTE: Snapshot artifacts will be signed."
                    } else {
                        println "WARNING: Snapshot artifacts will not be signed."
                    }
                }

                pom.project {
                    name "AndroidUtils"
                    packaging "aar"
                    description "Little helpers for Android development."
                    url "https://github.com/UweTrottmann/AndroidUtils"

                    scm {
                        url "scm:git@github.com:UweTrottmann/AndroidUtils.git"
                        connection "scm:git@github.com:UweTrottmann/AndroidUtils.git"
                        developerConnection "scm:git@github.com:UweTrottmann/AndroidUtils.git"
                    }

                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }

                    developers {
                        developer {
                            id "uwetrottmann"
                            name "Uwe Trottmann"
                        }
                    }
                }
            }
        }
    }

    task installArchives(type: Upload) {
        description "Installs the artifacts to the local Maven repository."
        configuration = configurations['archives']
        repositories {
            mavenDeployer {
                repository url: "file://${System.properties['user.home']}/.m2/repository"
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
        classpath += project.android.libraryVariants.toList().first().javaCompile.outputs.files
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = "sources"
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
